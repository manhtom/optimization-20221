import numpy as np

N = int #input number of customer
eld = [array 3xN] #input time constrain array
d = [array N+1 x N+1] #input travel time array



#time constrain checker
def time_check(route,currenttime):
    for i in range 0 to N:
        if currenttime - eld[i][2] < eld[i][0] and i in route: #deliver too early
            return True
        if currenttime -eld[i][2] > eld[i][1] and i not in route: #deliver too late
            return True
    return False
            

#calculate path time
def path_time(route):
    time = 0
    violate = False
    for i in range(len(route)):
        time += d[route[i+1]][route[i]]
        violation = time_check(route,time)
        if violation:
            violate = True

    return time, violate
        
#2-opt-swapper
two_opt_swap = lambda r,i,k: np.concatenate((r[0:i],r[k:-len(r)+i-1:-1],r[k+1:len(r)]))

def two_opt(cities,improvement_threshold):
    violate = True
    while violate:                              # make initial route by shuffling customer (while startpoint is fixed), but if its
        route = np.arange(N)                    # violated we make a new one
        rest = route[1:]   
        random.shuffle(rest)
        shuffled_arr = [route[0]] + rest
        best_time, violate = path_time(route)   # calc the time of the initial path
        no_violate_best_route = route
    
    
    improvement_factor = 1 #init improvement factor
    
    
    while improvement_factor > improvement_threshold: # keep going if theres still improvement
        time_to_beat = best_time # Record the previous best time at the beginning of the loop
        for swap_first in range(1,len(route)-1): # from each customer except the first
            for swap_last in range(swap_first+1,len(route)): # to each of the customer following
                new_route = two_opt_swap(route,swap_first,swap_last) # try reversing the order of these cities
                new_time, violate2 = path_time(new_route) # and check the total time with this modification.
                elif new_time < best_time: # if the time is improved
                    route = new_route # make this the accepted best route
                    best_time = new_time # and update the time corresponding to this route
                    if violate2 == False:
                        no_violate_best_route = route # remember the best route that wasnt violated

            improvement_factor = 1 - best_time/time_to_beat # calculate how much the route has improved

    return no_violate_best_route # when the route is no longer improving, stop searching and return the lastest accepted new row


